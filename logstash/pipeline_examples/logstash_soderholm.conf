input {
    file {
        tags => "soderholm"
        path => [ "/var/data/xml/soderholm_xml/**/*.xml" ]
        exclude => [ "*_com.xml", "*_int.xml" ] # Exclude comment files and only internally shown files
        start_position => "beginning"
        max_open_files => 4095
        close_older => "5 min"
        sincedb_path => "/dev/null"
        codec => multiline {
            pattern => "^<\?xml .*\?>"
            negate => true
            what => "previous"
            max_lines => 18000
            max_bytes => "40 MiB"
            auto_flush_interval => 3
        }
    }
}

filter {
    if "soderholm" in [tags] {
        fingerprint {
            source => "path"
            target => "[@metadata][fingerprint]"
            method => "MD5"
            key => "soderholm"
            base64encode => true
        }
        
        # Get project_xml_path, text_type, collection_id, publication_id, type_id and language from file path
        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE:project_xml_path}/%{NOTSPACE:text_type}/"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER:collection_id}_%{NOTSPACE}"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER}_%{NUMBER:publication_id}_"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER}_%{NUMBER}_%{NOTSPACE}_%{NUMBER:type_id}.xml"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER}_%{NOTSPACE}_%{NOTSPACE:language}_(?<publishedVersion>[a-zA-Z]{1,}).xml"
            }
        }


        # Get publication_id from file content if not successfully set from file path above
        if [text_type] != "tit" and [text_type] != "fore" and [text_type] != "inl" and [publication_id] !~ /[0-9]{1,}/ {
            grok {
                match => { 
                    "message" => "<idNo>%{NUMBER:publication_id}</idNo>"
                }
            }
        }

        # Get additional fields from file content
        grok {
            match => {
                "message" => "<placeName type=\"sender\" id=\"%{NUMBER:sender_location_id}\">%{DATA:sender_location_name}</placeName>"
            }
        }

        grok {
            match => {
                "message" => "<placeName type=\"adressee\" id=\"%{NUMBER:receiver_location_id}\">%{DATA:receiver_location_name}</placeName>"
            }
        }

        grok {
            match => {
                "message" => "<persName type=\"sender\" id=\"%{NUMBER:sender_subject_id}\">%{DATA:sender_subject_name}</persName>"
            }
        }

        grok {
            match => {
                "message" => "<persName type=\"adressee\" id=\"%{NUMBER:receiver_subject_id}\">%{DATA:receiver_subject_name}</persName>"
            }
        }

        grok {
            match => {
                "message" => "<title type=\"readingtext\" id=\"%{NUMBER:corresp_id}\">%{DATA:corresp_title}</title>"
            }
        }

        grok {
            match => {
                "message" => "<origDate>%{NOTSPACE:orig_date}</origDate>"
            }
        }

        # Format content before processing as xml
        mutate {
            gsub => [
                # Remove attributes from TEI root element
                "message", "<TEI (?m:.)+?>", "<TEI>",
                # Remove xml:space preserve attribute
                "message", " xml:space=\"preserve\"", "",
                # Remove space before self-closing tag end
                "message", " />", "/>",
                # Remove tab-characters
                "message", "\t", "",
                 # Insert space before notes
                "message", "<note ", " <note ",
                # Remove formula tags
                "message", "<formula.+?</formula>", "",
                # Remove orig tags
                "message", "<choice><orig>.+?</orig>", "<choice>",
                # Remove expan tags
                "message", "</abbr><expan.+?</expan>", "</abbr>",
                # Remove var tags
                "message", "<choice><var>.+?</var>", "<choice>",
                # Add space before line break tags (since they can be inline)
                "message", "<lb/>", " <lb/>",
                # Remove multiple, consecutive spaces
                "message", "[ ]{2,}", " ",
                # Remove carriage returns
                "message", "\r", "",
                # Remove soft hyphen characters
                "message", "&#173;", ""
            ]
        }

        # Format manuscript text content before processing as xml
        if [text_type] == "ms" {
            mutate {
                gsub => [
                    # Add space between del and add tags
                    "message", "</del><add", "</del> <add",
                    # Add space before alternative phrase
                    "message", "<add reason=\"choice\">", " <add reason=\"choice\">"
                ]
            }
        }

        # Extract fields from xml contents
        xml {
            source => "message"
            store_xml => false
            remove_namespaces => true
            xpath => {
                "string(//teiHeader/fileDesc/titleStmt/title)" => "xmlHeadTitle"
                "string(//teiHeader/fileDesc/publicationStmt/publisher)" => "xmlHeadPublisher"
                "string(//catRef/@target)" => "xmlCatRef"
                "string(//creation/origDate/text())" => "xmlOrigDate"
                "string(//body)" => "xmlTextData"
            }
        }
        
        mutate {
            add_field => {
                "doc_title" => "%{xmlHeadTitle}"
                "publisher" => "%{xmlHeadPublisher}"
                "cat_ref" => "%{xmlCatRef}"
                "text_data" => "%{xmlTextData}"
            }
        }

        mutate {
            convert => {
                "doc_title" => "string"
                "publisher" => "string"
                "cat_ref" => "string"
                "text_data" => "string"
            }
        }

        # Process text_data
        if [text_data] {
            mutate {
                gsub => [
                    # Remove narrow non-breaking spaces
                    "text_data", " ", "",
                    # Replace non-breaking spaces with normal spaces
                    "text_data", " ", " "
                ]
            }
        }

        # Get the orig_date from xml if the grok failed
        if ![orig_date] {
            mutate {
                add_field => {
                    "orig_date" => "%{xmlOrigDate}"
                }
            }
        }
        
        # Set date for document from properly formed date string
        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            date {
                match => [ "orig_date", "yyyy-MM-dd" ]
            }
        }

        # Store invalid date in orig_date_uncertain
        if [orig_date] !~ /[0-9]{4}-[0-9]{2}-[0-9]{2}$/ {
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE:orig_date_uncertain}</origDate>"
                }
            }
        }

        # Date convert
        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            # The date string is properly formed -> store it in orig_date_certain
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE:orig_date_certain}</origDate>"
                }
            }

            date {
                match => [ "orig_date_certain", "yyyy-MM-dd" ]
            }
        }

        # Extract year, month and day from properly formed date string
        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE:orig_date_year_certain}-%{NOTSPACE:orig_date_month_certain}-%{NOTSPACE:orig_date_day_certain}</origDate>"
                }
            }
        }
   
        grok {
            match => { 
                "message" => "<origDate>%{NOTSPACE:orig_date_year}-%{NOTSPACE:orig_date_month}-%{NOTSPACE:orig_date_day}</origDate>"
            }
        }

        if [orig_date_year] !~ /^[0-9]{4}$/ {
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE:orig_date_year_uncertain}-%{NOTSPACE}-%{NOTSPACE}</origDate>"
                }
            }
        }

        if [orig_date_month] !~ /^[0-9]{2}$/ {
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE}-%{NOTSPACE:orig_date_month_uncertain}-%{NOTSPACE}</origDate>"
                }
            }
        }

        if [orig_date_day] !~ /^[0-9]{2}$/ {
            grok {
                match => { 
                    "message" => "<origDate>%{NOTSPACE}-%{NOTSPACE}-%{NOTSPACE:orig_date_day_uncertain}</origDate>"
                }
            }
        }

        if [orig_date_year] !~ /^[0-9]{4}$/ and [orig_date_year_uncertain] =~ /^[0-9]{4}$/ {
            mutate {
                add_field => {
                    "orig_date_year" => "%{orig_date_year_uncertain}"
                }
            }
        }

        # Form date field for sorting
        if [orig_date_certain] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            mutate {
                add_field => {
                    "orig_date_sort" => "%{orig_date_certain}"
                }
            }
        } else if [orig_date_year] =~ /^[0-9]{4}$/ and [orig_date_month_uncertain] =~ /^[0-9]{2}$/ {
            if [orig_date_month_uncertain] == "02" {
                mutate {
                    add_field => {
                        "orig_date_sort" => "%{orig_date_year}-%{orig_date_month_uncertain}-28"
                    }
                }
            } else if [orig_date_month_uncertain] == "04" or [orig_date_month_uncertain] == "06" or [orig_date_month_uncertain] == "09" or [orig_date_month_uncertain] == "11" {
                mutate {
                    add_field => {
                        "orig_date_sort" => "%{orig_date_year}-%{orig_date_month_uncertain}-30"
                    }
                }
            } else {
                mutate {
                    add_field => {
                        "orig_date_sort" => "%{orig_date_year}-%{orig_date_month_uncertain}-31"
                    }
                }
            }
        } else if [orig_date_year] =~ /^[0-9]{4}$/ {
            mutate {
                add_field => {
                    "orig_date_sort" => "%{orig_date_year}-12-31"
                }
            }
        }

        if [publication_id] =~ /[0-9]{1,}/ {
            # Get publication data from database
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
                jdbc_user => "[DB USER]"
                jdbc_password => "[db user password]"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => "SELECT p.name as publication_name, pc.name as collection_name, p.genre, p.published, p.deleted, pc.published as collection_published, pc.deleted as collection_deleted
                                FROM publication p 
                                JOIN publication_collection pc ON pc.id = p.publication_collection_id 
                                WHERE p.id = :idparam ORDER BY pc.id"
                parameters => { "idparam" => "publication_id" }
                target => "publication_data"
            }

            if [text_type] == "ms" and [type_id] =~ /[0-9]{1,}/ {
                # Get manuscript data from database
                jdbc_streaming {
                    jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
                    jdbc_user => "[DB USER]"
                    jdbc_password => "[db user password]"
                    jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                    jdbc_driver_class => "org.postgresql.Driver"
                    statement => "SELECT ms.name, ms.published, ms.deleted
                                    FROM publication_manuscript ms  
                                    WHERE ms.id = :idparam ORDER BY ms.id"
                    parameters => { "idparam" => "type_id" }
                    target => "ms_data"
                }
            }
        }

        # Add a field for determining if the text has been deleted
        mutate {
            add_field => { "deleted" => 0 }
        }

        if [publication_data][0][collection_deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        } else if [type_id] =~ /[0-9]{1,}/ and [text_type] == "ms" and [ms_data][0][deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        }

        # Add a field for the text's published status
        mutate {
            add_field => { "published" => 2 }
        }
        if [publication_data][0][collection_published] == 1 {
            mutate {
                update => { "published" => 1 }
            }
        } else if [publication_data][0][collection_published] == 0 {
            mutate {
                update => { "published" => 0 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][published] == 1 {
            mutate {
                update => { "published" => 1 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][published] == 0 {
            mutate {
                update => { "published" => 0 }
            }
        }

        # Add a field with the primary text title
        if [text_type] == "ms" and [type_id] =~ /[0-9]{1,}/ {
            mutate {
                add_field => { "text_title" => "%{[ms_data][0][name]}" }
            }
        } else {
            mutate {
                add_field => { "text_title" => "%{[publication_data][0][publication_name]}" }
            }
        }

        mutate {
            strip => [ "doc_title", "publisher", "cat_ref", "text_title", "text_data" ]
        }

        # Add a field with a copy of document_id which can be used as a tie breaker for the sort when using search_after for pagination in elastic
        mutate {
            add_field => { "tie_breaker_id" => "%{[@metadata][fingerprint]}" }
        }

        if [message] {
            mutate {
                remove_field => [ "message", "xmlHeadTitle", "xmlHeadPublisher", "xmlCatRef", "xmlTextData", "xmlOrigDate" ]
            }
        }
        if [publishedVersion] {
            mutate {
                remove_field => [ "publishedVersion" ]
            }
        }
    }
}

output {
    if "soderholm" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "soderholm"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
}
