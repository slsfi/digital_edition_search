input {
    # Ingest textual content of pdf books in Granqvist. The pdfs have been saved
    # in plain text format where each page is one file. The filename consists of
    # the page number in the pdf file.
    file {
        tags => "granqvist"
        path => [ "/var/data/txt/granqvist_txt/pdf/**/*.txt" ]
        start_position => "beginning"
        max_open_files => 4095
        close_older => "5 min"
        sincedb_path => "/dev/null"
        codec => multiline {
            pattern => "^\s"
            negate => true
            what => "previous"
            max_lines => 18000
            max_bytes => "40 MiB"
            auto_flush_interval => 4
        }
    }
}

filter {
    if "granqvist" in [tags] {
        fingerprint {
            source => "path"
            target => "[@metadata][fingerprint]"
            method => "MD5"
            key => "granqvist"
            base64encode => true
        }

        # Get collection_id (id of pdf book) and page_nr from file path
        grok {
            match => {
                "path" => "/var/data/txt/granqvist_txt/pdf/%{NUMBER:collection_id}/"
            }
        }

        grok {
            match => {
                "path" => "/var/data/txt/granqvist_txt/pdf/%{NOTSPACE}/%{NUMBER:page_nr}.txt"
            }
        }

        # Get collection data (pdf title, deleted and published status) from database
        if [collection_id] =~ /[0-9]{1,}/ {
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
                jdbc_user => "[DB USER]"
                jdbc_password => "[db user password]"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => "SELECT pc.name as collection_name, pc.published, pc.deleted
                                FROM publication_collection pc 
                                WHERE pc.id = :idparam ORDER BY pc.id"
                parameters => { "idparam" => "collection_id" }
                target => "publication_data"
            }
        }

        # Format text content
        mutate {
            gsub => [
                # Remove carriage returns
                "message", "\r", "",
                # Remove soft hyphen characters
                "message", "&#173;", "",
                # Remove narrow non-breaking spaces
                "message", " ", "",
                # Replace non-breaking spaces with normal spaces
                "message", " ", " ",
                # Remove multiple, consecutive spaces
                "message", "[ ]{2,}", " "
            ]
        }

        # Add fields for primary text title (for pdfs it's the page number),
        # text type (pdf) and text/page content
        mutate {
            add_field => {
                "text_title" => "%{page_nr}"
                "text_type" => "pdf"
                "text_data" => "%{message}"
            }
        }

        # Ensure text_title and text_data fields are stored as strings
        mutate {
            convert => {
                "text_title" => "string"
                "text_data" => "string"
            }
        }

        # Remove leading and trailing whitespace
        mutate {
            strip => [ "text_title", "text_data" ]
        }

        # Add a field for determining if the text has been deleted
        mutate {
            add_field => { "deleted" => 0 }
        }

        if [publication_data][0][deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        }

        # Add a field for the text's published status
        mutate {
            add_field => { "published" => 2 }
        }

        if [publication_data][0][published] == 1 {
            mutate {
                update => { "published" => 1 }
            }
        }

        # Add a field with a copy of document_id which can be used as a tie
        # breaker for the sort when using search_after for pagination in elastic
        mutate {
            add_field => { "tie_breaker_id" => "%{[@metadata][fingerprint]}" }
        }

        # Remove intermediary fields that are not needed in the final output
        mutate {
            remove_field => [ "message" ]
        }
    }
}

output {
    if "granqvist" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "granqvist"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
}
