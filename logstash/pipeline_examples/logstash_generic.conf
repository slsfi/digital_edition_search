input { 
    jdbc {
        tags => "song"
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
        # The user we wish to execute our statement as
        jdbc_user => "[DB USER]"
        jdbc_password=> "[db user password]"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "org.postgresql.Driver"
        # our query
        statement => 'SELECT 
ps.id as song_id, ps.original_id as song_original_id, ps.name as song_name, ps.type as song_type, number as song_number, 
variant as song_variant, landscape as song_landscape, place as song_place, recorder_firstname as song_recorder_firstname, 
recorder_lastname as song_recorder_lastname, recorder_born_name as song_recorder_born_name, performer_firstname as song_performer_firstname,
performer_lastname as song_performer_lastname, performer_born_name as song_performer_born_name, 
original_collection_location as song_original_collection_location, 
original_collection_signature as song_original_collection_signature,
ps.original_publication_date as song_original_publication_date, page_number as song_page_number, subtype as song_subtype, 
ps.note as song_note, ps.comment as song_comment, ps.lyrics as song_lyrics, pc.project_id
FROM publication_song ps
join publication p on p.id = ps.publication_id
join publication_collection pc on pc.id = p.publication_collection_id
'
        schedule => "*/5 * * * *"
    }

    jdbc {
        tags => "media_collection_subject"
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
        # The user we wish to execute our statement as
        jdbc_user => "[DB USER]"
        jdbc_password=> "[db user password]"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "org.postgresql.Driver"
        # our query
        statement => 'select s.id as s_id, m.id as media_id, m.image_filename_front as filename, mcol.id as media_collection_id, mcol.image_path, s.* from media_connection mc
JOIN media m ON m.id = mc.media_id 
JOIN media_collection mcol ON mcol.id = m.media_collection_id 
JOIN subject s ON s.id = mc.subject_id'
        schedule => "*/5 * * * *"
    }

    jdbc {
        tags => "media_collection_tag"
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
        # The user we wish to execute our statement as
        jdbc_user => "[DB USER]"
        jdbc_password=> "[db user password]"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "org.postgresql.Driver"
        # our query
        statement => 'select s.id as t_id, m.id as media_id, m.image_filename_front as filename, mcol.id as media_collection_id, mcol.image_path, s.* from media_connection mc
JOIN media m ON m.id = mc.media_id
JOIN media_collection mcol ON mcol.id = m.media_collection_id
JOIN tag s ON s.id = mc.subject_id'
        schedule => "*/5 * * * *"
    }

    jdbc {
        tags => "media_collection_location"
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
        # The user we wish to execute our statement as
        jdbc_user => "[DB USER]"
        jdbc_password=> "[db user password]"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "org.postgresql.Driver"
        # our query
        statement => 'select s.id as l_id, m.id as media_id, m.image_filename_front as filename, mcol.id as media_collection_id, mcol.image_path, s.* from media_connection mc
JOIN media m ON m.id = mc.media_id
JOIN media_collection mcol ON mcol.id = m.media_collection_id
JOIN location s ON s.id = mc.subject_id'
        schedule => "*/5 * * * *"
    }


}

filter 
{
    
}

## Add your filters / logstash plugins configuration here
output {
    if "song" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "song"
            document_id => "%{[song_id]}"
        }
    }
    if "media_collection_tag" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "media_collection_tag"
            document_id => "%{[t_id]}"
        }
    }
    if "media_collection_subject" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "media_collection_subject"
            document_id => "%{[s_id]}"
        }
    }
    if "media_collection_location" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "media_collection_location"
            document_id => "%{[l_id]}"
        }
    }
}
