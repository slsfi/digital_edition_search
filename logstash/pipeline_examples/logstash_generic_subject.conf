input {
    jdbc {
        tags => "subject"
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
        # The user we wish to execute our statement as
        jdbc_user => "[DB USER]"
        jdbc_password=> "[DB USER PASSWORD]"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "org.postgresql.Driver"
        # our query
        statement => 'SELECT DISTINCT ON (sub.id) sub.id, sub.id as "sub_id", sub.legacy_id, sub.full_name,
                        sub.full_name as "sort_by_name", sub.last_name, sub.first_name, sub.preposition,
                        sub.description, sub.occupation, sub.place_of_birth, sub.date_born, sub.date_deceased,
                        sub.source, sub.type, sub.project_id, sub.deleted as "sub_deleted", 
                        pub.published as "publication_published", pub.published as "published",
                        pub.deleted as "publication_deleted",
                        ev.deleted as "ev_deleted",
                        ev_o.id as "occ_id", ev_o.publication_id, ev_o.publication_version_id,
                        ev_o.publication_manuscript_id, ev_o.publication_facsimile_id,
                        ev_o.publication_comment_id, ev_o.publication_facsimile_page,                        
                        ev_o.deleted as "ev_o_deleted",
                        ev_c.deleted as "ev_c_deleted"
                      FROM event ev
                      JOIN event_connection ev_c ON ev_c.event_id = ev.id
                      JOIN event_occurrence ev_o ON ev_o.event_id = ev.id
                      JOIN publication pub ON pub.id = ev_o.publication_id
                      JOIN subject sub ON ev_c.subject_id = sub.id
                      ORDER BY sub.id ASC, sub.deleted ASC, pub.deleted ASC, pub.published DESC,
                          ev.deleted ASC, ev_c.deleted ASC, ev_o.deleted ASC'
        schedule => "20 2 * * *"
    }
}

filter {
    # Modify date fields
    if [date_born] {
        if [date_born] =~ /[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2} [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}/ {
            date {
                match => [ "date_born", "yyyy-MM-dd HH:mm:ss" ]
                target => "date_born_date"
            }
        }
        if [date_born] =~ /[0-9]{1,4}/ {
            date {
                match => [ "date_born", "yyyy" ]
                target => "date_born_date"
            }
        }
    }
    if [date_deceased] {
        if [date_deceased] =~ /[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2} [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}/ {
            date {
                match => [ "date_deceased", "yyyy-MM-dd HH:mm:ss" ]
                target => "date_deceased_date"
            }
        }
        if [date_deceased] =~ /[0-9]{1,4}/ {
            date {
                match => [ "date_deceased", "yyyy" ]
                target => "date_deceased_date"
            }
        }
    }

    # Modify sort_by_name field
    mutate {
        gsub => [
            # Remove name prepositions and some special characters
            "sort_by_name", "Ê½", "",
            "sort_by_name", "^(?:de la |de |von |van |af |dâ€™ |dâ€™|di |du |des |zu |auf |del |do |dos |da |das |e |von der |van der )", ""
        ]
        lowercase => [ "sort_by_name" ]
    }
}

output {
    if "subject" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "subject"
            document_id => "%{[sub_id]}"
        }
    }
}
