input {
    file {
        tags => [ "ordsprak" ]
        path => [ "/var/data/xml/ordsprak_xml/**/*.xml" ]
        start_position => "beginning"
        max_open_files => 4095
        close_older => "5 min"
        sincedb_path => "/dev/null"
        codec => multiline {
            pattern => "^<\?xml .*\?>"
            negate => true
            what => "previous"
            max_lines => 18000
            max_bytes => "40 MiB"
            auto_flush_interval => 4
        }        
    }
}

filter {
    if "ordsprak" in [tags] {
        # Create a fingerprint for the event from the file path,
        # used as the document id in Elastic
        fingerprint {
            source => "path"
            target => "[@metadata][fingerprint]"
            method => "MD5"
            key => "ordsprak"
            base64encode => true
        }

        # Get project_xml_path, text_type, collection_id and
        # publication_id from file path
        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE:project_xml_path}/%{NOTSPACE:text_type}/%{NUMBER:collection_id}_%{NUMBER:publication_id}_"
            }
        }

        # Format file content ('message') before processing as xml
        mutate {
            gsub => [
                # Remove narrow non-breaking spaces
                "message", " ", "",
                # Replace non-breaking spaces with normal spaces
                "message", " ", " ",
                # Remove tab-characters
                "message", "\t", "",
                # Remove multiple, consecutive spaces
                "message", "[ ]{2,}", " ",
                # Remove carriage returns
                "message", "\r", "",
                # Remove soft hyphen characters
                "message", "&#173;", ""
            ]
        }

        # Extract fields from xml contents
        xml {
            source => "message"
            store_xml => false
            remove_namespaces => true
            xpath => {
                "string(//baseText/@text)" => "doc_title"
                "//proverb/@text" => "proverbs"
                "//placeName/@onki_province" => "region"
                "//collection/@signum" => "signum"
            }
        }

        # Join the array elements in the 'proverbs' field into a single
        # string, separated by newline characters, and store it in the
        # 'text_data' field
        ruby {
            code => "
                proverbs = event.get('proverbs')
                if proverbs.is_a?(Array)
                    event.set('text_data', proverbs.join('\n'))
                else
                    event.set('text_data', '')
                end
            "
        }

        # Remove duplicate entries from 'region' array and ensure the field is an
        # empty array in case the xpath expression returns an empty result
        ruby {
            code => "
                regions = event.get('region')
                if regions.nil? || regions.empty?
                    event.set('region', [])
                elsif regions.is_a?(Array)
                    event.set('region', regions.uniq)
                else
                    event.set('region', [regions])
                end
            "
        }

        # Remove duplicate entries from 'signum' array and ensure the field is an
        # empty array in case the xpath expression returns an empty result
        ruby {
            code => "
                signa = event.get('signum')
                if signa.nil? || signa.empty?
                    event.set('signum', [])
                elsif signa.is_a?(Array)
                    event.set('signum', signa.uniq)
                else
                    event.set('signum', [signa])
                end
            "
        }

        # Convert field data types to string
        mutate {
            convert => {
                "doc_title" => "string"
            }
        }

        # If publication_id is numeric, get publication data from database
        if [publication_id] =~ /[0-9]{1,}/ {
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://[IP OF DATABASE]:5432/digitaledition"
                jdbc_user => "[DB USER]"
                jdbc_password => "[db user password]"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => "SELECT p.name as publication_name, pc.name as collection_name, p.published, p.deleted, pc.published as collection_published, pc.deleted as collection_deleted
                                FROM publication p 
                                JOIN publication_collection pc ON pc.id = p.publication_collection_id 
                                WHERE p.id = :idparam ORDER BY pc.id"
                parameters => { "idparam" => "publication_id" }
                target => "publication_data"
            }
        }

        # Add a field for determining if the text has been deleted
        mutate {
            add_field => { "deleted" => 0 }
        }

        # Set the 'deleted' field value to 1 (true) if either publication or
        # publication_collection is deleted
        if [publication_data][0][collection_deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][deleted] == 1 {
            mutate {
                update => { "deleted" => 1 }
            }
        }

        # Add a field for the text's published status
        mutate {
            add_field => { "published" => 2 }
        }

        # Set the 'published' field value based on the published status of the
        # publication and publication collection
        if [publication_data][0][collection_published] == 1 {
            mutate {
                update => { "published" => 1 }
            }
        } else if [publication_data][0][collection_published] == 0 {
            mutate {
                update => { "published" => 0 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][published] == 1 {
            mutate {
                update => { "published" => 1 }
            }
        } else if [publication_id] =~ /[0-9]{1,}/ and [publication_data][0][published] == 0 {
            mutate {
                update => { "published" => 0 }
            }
        }

        # Remove leading and trailing whitespace from fields
        mutate {
            strip => [ "doc_title", "text_data" ]
        }

        # Add a field with the primary text title, for this edition,
        # use 'doc_title' field value, which is from the xml file
        mutate {
            add_field => { "text_title" => "%{doc_title}" }
        }

        # Add a field with a copy of document_id which can be used as
        # a tie breaker for the sort when using search_after for
        # pagination in elastic
        mutate {
            add_field => { "tie_breaker_id" => "%{[@metadata][fingerprint]}" }
        }

        # Remove intermediary fields that are not needed in the final output
        if [message] {
            mutate {
                remove_field => [ "message", "proverbs", "project_xml_path" ]
            }
        }
    }
}

output {
    if "ordsprak" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "ordsprak"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
}
